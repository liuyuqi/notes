Description:

Find the contiguous subarray within an array (containing at least one number) which has the largest sum.

For example, given the array [−2,1,−3,4,−1,2,1,−5,4],
the contiguous subarray [4,−1,2,1] has the largest sum = 6.

================================================
Thoughts:
--------------------
1. Use DP to reduce the amount of calculation (since the requirement is "contiguous subarray").

2. Identify the subproblem before coding.
     subproblem: the sum of the maximum subarray of index 0...n (and must include n as the last element)
     Recursion: for a problem P(A, n-1) and an item A[n].
                    if P(A, n-1) > 0, then P(A, n) = P(A, n-1) + A[n];
                    else, P(A, n) = A[n];
                    
     Implementation:
                use an array records (int [n]) to record the value of each subproblem.
                use a maximum record (int) to record the maximum value of all subproblems.
                return the maximum record.
                

================================================
Codes (C, iterative DP):
---------------------------------
int maxSubArray(int A[], int n) {
    int max = A[0], i;
    int *records = (int*)malloc(sizeof(int[n]));
    records[0] = A[0];
    
    for (i = 1; i < n; i++) {
        records[i] = A[i] + (records[i-1] > 0 ? records[i-1] : 0);
        max = (records[i] > max) ? records[i] : max;
    }
    
    free(records);
    return max;
}
