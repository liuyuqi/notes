Description:

The set [1,2,3,â€¦,n] contains a total of n! unique permutations.

By listing and labeling all of the permutations in order,
We get the following sequence (ie, for n = 3):

"123"
"132"
"213"
"231"
"312"
"321"
Given n and k, return the kth permutation sequence.

Note: Given n will be between 1 and 9 inclusive.

========================================
Thoughts:

This is similar to the permutation problem, except that I shouldn't simulate the execution process. Instead we should count the number, and return the value with the exact string.

First build an array of int recording the number of possible permutations given a prefix. For example, for set [1,2,3,4], the array should be [6,2,1,1].

Then calculate which one to take precisely. The set and record array should change dynamicly as the recursion goes on. For example, n = 4, k = 7.

set            array         k          record
[1,2,3,4]     [6,2,1,1]      13            ""
[1,2,4]       [2,1,1]        1            "3"
[2,4]         [1,1]          1           "31"
[4]           [1]            1           "312"
[]            []             1           "3124"


=======================================
Code (Python, recursive):
------------------------------
class Solution:
    # @return a string
    def getPermutation(self, n, k):
        numOfPermutation = self.getNumOfPermutation(n)
        resultPermutation = []
        nums = range(1,n+1)
        self.getPermutationRecurse(nums, k, numOfPermutation, resultPermutation)
        return self.getString(resultPermutation)
    
    
    def getString(self, resultLst):
        result = ""
        for i in resultLst:
            result += str(i)
        return result
        
        
    def getPermutationRecurse(self, nums, k, numRecord, resultPermu):

        choiceIdx = int((k-1)/numRecord[0])
        resultPermu.append(nums[choiceIdx])
        
        newNums = nums[0:choiceIdx]+nums[choiceIdx+1:]
        if newNums == []:
            return
        
        newK = k-choiceIdx*numRecord[0]
        self.getPermutationRecurse(newNums, newK, numRecord[1:], resultPermu)
        
        
    def getNumOfPermutation(self, n):
        records = []
        for i in range(n):
            records.append(self.getStairs(n-i-1))
        return records
    
    
    def getStairs(self, n):
        result = 1
        while n > 0:
            result *= n
            n -= 1
        return result
        
