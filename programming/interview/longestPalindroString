Description:

Given a string S, find the longest palindromic substring in S. You may assume that the maximum length of S is 1000, and there exists one unique longest palindromic substring.

=======================================
Thoughts:

the DP solution of this problem is very intuitive. It can be best described in some follow-up posts:

# The key intuition of this algorithm is that palindromes are made up of
# smaller palindromes.

# So, a palindrome of length 100 (for example), will have a palindrome of
# length 98 inside it, and one of length 96, ... 50, ... 4, and 2.

# Because of this, we can move across our string, checking if the current
# place is a palindrome of a particular length (the longest length palindrome
# found so far + 1), and if it is, update the longest length, and move forward.

# In this way, we find our longest palindromes "from the inside out", starting
# with length x, then x+2, x+4, ...

# Example:
# "xxABCDCBAio"
#  0123456789  < indexes
# As we scan our string, we initially find a palindrome of length 2 (xx)
# We always look backwards!
# When we get to index 2,3,4, we see no length 3+ palindrome ending there.
# But when we get to index 6, looking back 3 characters, we see "CDC"! So our
# longest palindrome is now length 3.
# At index 7, we look back and see no length 4 palindromes, but find one of
# length 5 ("BCDCB").
# And finally, by i = 8, we find the full "ABCDCBA"


========================================
Code (Python, iterative DP):
---------------------------------
class Solution:
    # @return a string
    def longestPalindrome(self, s):
        if len(s) == 1:
            return s
            
        maxLen = 1
        minSearchLen = 2
        maxSearchLen = 3
        result = ""
        
        for endIdx in range(1, len(s)): # endIdx is inclusive
            minString = s[endIdx-minSearchLen+1:endIdx+1]
            if self.isPalindrome(minString) is True:
                result = minString
                maxLen = minSearchLen
                
            if maxSearchLen <= endIdx+1:
                maxString = s[endIdx-maxSearchLen+1:endIdx+1]
                if self.isPalindrome(maxString) is True:
                    result = maxString
                    maxLen = maxSearchLen
            
            minSearchLen = maxLen+1
            maxSearchLen = maxLen+2
            
        return result
    
    def isPalindrome(self, s):
        length = len(s)
        for idx1 in range(length/2):
            if s[idx1] != s[length-idx1-1]:
                return False
        return True
