Description:

Given a digit string, return all possible letter combinations that the number could represent.

A mapping of digit to letters (just like on the telephone buttons) is given below.



Input:Digit string "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].

Note:
Although the above answer is in lexicographical order, your answer could be in any order you want.

=========================================
Thought:

Nothing to say... just normal recursion, with letters adding up in distribution.

=========================================
Code (Python, recursion/DP):
----------------------------------
class Solution:
    # @return a list of strings, [s1, s2]
    def letterCombinations(self, digits):
        if len(digits) == 0:
            return []
        lettersOnButton = ["", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"]
        result = []
        partResult = [""]
        
        self.combRecurse(digits, lettersOnButton, partResult, result)
        
        return result
        
    def combRecurse(self, digits, lettersOnButton, partResult, result):
        if len(digits) == 0:
            result.extend(partResult)
            return
        
        lettersOfTheDigit = lettersOnButton[int(digits[0])]
        for c in lettersOfTheDigit:
            newPartResult = partResult[:]
            for idx in range(len(newPartResult)):
                newPartResult[idx] += c
            self.combRecurse(digits[1:], lettersOnButton, newPartResult, result)
