====================================
Thoughts:

1. Have to use two HashSets: foundSet and doubleFoundSet.

2. Process:

Whenever a string is iterated, try adding it into the foundSet. 
If it already exists in foundSet, foundSet will reject the string adding in, and foundSet.add() will return false.
If we get a false return value, we should add it into the doubleFoundSet.

If the substring is not in doubleFoundSet, we get a true from doubleFoundSet.add(), then we add the string to the result list.
Otherwise, if doubleFoundSet.add() returns false, we have already added the string into doubleFoundSet, and hence in the result list. In this case, we don't need to do anything and enter the next iteration of for loop.

OR

We could iterate the doubleFoundList at the end, creating the final result list.

3. In order to save memory, we could convert strings into a single int before adding them into the HashSets.

====================================
Code:
--------------------------------
public class Solution {
    public List<String> findRepeatedDnaSequences(String s) {
        int startPos, endPos, currentInt;
        String currentString;
        List<String> result = new ArrayList<String>();
        HashSet<Integer> foundSet = new HashSet<Integer>();
        HashSet<Integer> doubleFoundSet = new HashSet<Integer>();
        
        if (s.length() < 11)
            return result;
            
        for (startPos = 0, endPos = startPos + 10; endPos <= s.length(); startPos++, endPos++) {
            currentString = s.substring(startPos, endPos);
            currentInt = stringToInt(currentString);
            if (foundSet.add(currentInt) == false) {
                if (doubleFoundSet.add(currentInt) == true) {
                    result.add(currentString);
                }
            }
        }
        
        return result;
    }
    
    public static int stringToInt(String s) {
        int result = 0;
        for (int i = 0; i < 10; i++) {
            result *= 4;
            if (s.charAt(i) == 'T')
                result += 1;
            else if (s.charAt(i) == 'C')
                result += 2;
            else if (s.charAt(i) == 'G')
                result += 3;
        }
        return result;
    }
}
