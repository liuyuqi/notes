Description:

Follow up for "Search in Rotated Sorted Array":
What if duplicates are allowed?

Would this affect the run-time complexity? How and why?

Write a function to determine if a given target is in the array.

=================================================
Thoughts:

Still, I'm first going to find the offset of the rotation using binary search. After I found the offset value, do the binary search again with converted indices.

However, things changed from the version I. Since duplicated elements are allowed, if we found that A[mid] == A[start] or A[mid] == A[end], we cannot know whether the offset index is in the left half or the right half (there's no way to know that). The only thing we can do is narrow down the range by 1 each time. Example arrays:

 5 5 5 5 5 5 5 5 5 (5) 5 5 5 5 6 7 3 4 5
 
 5 5 5 6 7 3 4 5 5 (5) 5 5 5 5 5 5 5 5 5 
 
This may make the time complexity much worse, from logn to (possibly) n!

=================================================
Code (binary search, C):
------------------------------------------
bool search(int A[], int n, int target) {
     int offset = -1, start = 0, end = n-1, mid;
        if (A[0] < A[n-1]) {
            offset = 0;
        } else {
            while (start < end) {
                mid = (start + end) / 2;
                if (A[mid] > A[mid+1]) {
                    offset = mid + 1;
                    break;
                } else if (mid > 0 && A[mid-1] > A[mid]) {
                    offset = mid;
                    break;
                } else if (A[mid] > A[start]) {
                    start = mid + 1;
                } else if (A[mid] < A[start]) {
                    end = mid - 1;
                } else if (A[mid] == A[start]) {
                    start++;
                } else if (A[mid] == A[end]) {
                    end--;
                }
            }
        }
        
        if (offset == -1) {
            offset = start;
        }
        
        int logicalStart = 0, logicalEnd = n-1, logicalMid, realMid;
        while (logicalStart < logicalEnd) {
            logicalMid = (logicalStart + logicalEnd) / 2;
            realMid = (logicalMid + offset) % n;
            if (A[realMid] == target) {
                return true;
            } else if (A[realMid] < target) {
                logicalStart = logicalMid + 1;
            } else {
                logicalEnd = logicalMid - 1;
            }
        }
        if (A[(logicalStart + offset) % n] == target) {
            return true;
        } else {
            return false;
        }
}

