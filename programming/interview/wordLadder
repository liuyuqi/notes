Descriptions: 
 
Given two words (beginWord and endWord), and a dictionary, find the length of shortest transformation sequence from beginWord to endWord, such that:

    Only one letter can be changed at a time
    Each intermediate word must exist in the dictionary

For example,

Given:
start = "hit"
end = "cog"
dict = ["hot","dot","dog","lot","log"]

As one shortest transformation is "hit" -> "hot" -> "dot" -> "dog" -> "cog",
return its length 5.

Note:

    Return 0 if there is no such transformation sequence.
    All words have the same length.
    All words contain only lowercase alphabetic characters.

=====================================================================
Thoughts:

1. General thoughts: BFS. But EXTREMELY SLOW!!! Need to cut down on search ranges.

2. 

=====================================================================
Code 1 (Pure BFS, iterative, Python, very slow):
---------------------------------------------------
import collections
class Solution:
    # @param beginWord, a string
    # @param endWord, a string
    # @param wordDict, a set<string>
    # @return an integer
    def ladderLength(self, beginWord, endWord, wordDict):
        processQueue = collections.deque([]) # contains partial sequences of words.
        wDictTmp = wordDict.copy() # This is a set, yet keeps changing and is adaptable to a list.
        processQueue.append([beginWord])
        
        while len(processQueue) > 0:
            wordSeq = processQueue.popleft()
            frontWord = wordSeq[-1]
            
            # remove existing words in the sequence from the temp dictionary.
            for word in wordSeq:
                wDictTmp.discard(word)
            
            for key in wDictTmp:
                if self.wordDiff(frontWord, key) == 1:
                    if key == endWord:
                        return len(wordSeq) + 1
                    else:
                        processQueue.append(wordSeq + [key])
                        
            # recover the dictionary, getting ready for the next loop.
            for word in wordSeq:
                wDictTmp.add(word)
        
        return 0
            
            
    
    # return the number of char that is different between the two words.
    def wordDiff(self, word1, word2):
        diffValue = 0
        for idx in range(len(word1)):
            if word1[idx] != word2[idx]:
                diffValue += 1
        return diffValue
        
===============================================================================
Code 2 
