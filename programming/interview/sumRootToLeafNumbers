Description:

Given a binary tree containing digits from 0-9 only, each root-to-leaf path could represent a number.

An example is the root-to-leaf path 1->2->3 which represents the number 123.

Find the total sum of all root-to-leaf numbers.

For example,

    1
   / \
  2   3

The root-to-leaf path 1->2 represents the number 12.
The root-to-leaf path 1->3 represents the number 13.

Return the sum = 12 + 13 = 25. 

===========================================================
Thoughts:

Can be done in a recursive way, passing the pointer to the result all the way down to the recursive-calling functions. But notice that this version is WRONG:

void sumHelper(struct TreeNode *currNode, int currVal, int *result) {
    if (currNode == NULL) {
        (*result) += currVal;
        return;
    }
    int newVal = currVal * 10 + currNode->val;
    sumHelper(currNode->left, newVal, result);
    sumHelper(currNode->right, newVal, result);
}
 
int sumNumbers(struct TreeNode* root) {
    int result = 0;
    sumHelper(root, 0, &result);
    return result;
}

Why?

If we call sumNumbers on a tree that contains only one node: 9, the result will be 18.

A binary tree has two children, and a fringe node has two NULL childrens. The function sumHelper() will be called twice on two NULL children, and the result will be double summed here!

If we don't add the result this way, how are we going to end the recursion?

Do more check...


=======================================================
Code (recursion, C):
--------------------------------------
void sumHelper(struct TreeNode *currNode, int currVal, int *result) {

    int newVal = currVal * 10 + currNode->val;
    
    /* This is how we end the recursion */
    if (currNode->left == NULL && currNode->right == NULL) {
        (*result) += newVal;
        return;
    } else {
    /* This is how we prevent calling on NULL nodes... */
        if (currNode->left != NULL)
            sumHelper(currNode->left, newVal, result);
        if (currNode->right != NULL)
            sumHelper(currNode->right, newVal, result);
    }
}
 
int sumNumbers(struct TreeNode* root) {
    int result = 0;
    if (root == NULL) {
        return result;
    }
    sumHelper(root, 0, &result);
    return result;
}
