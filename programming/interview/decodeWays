Description:

A message containing letters from A-Z is being encoded to numbers using the following mapping:

'A' -> 1
'B' -> 2
...
'Z' -> 26
Given an encoded message containing digits, determine the total number of ways to decode it.

For example,
Given encoded message "12", it could be decoded as "AB" (1 2) or "L" (12).

The number of ways decoding "12" is 2.

===========================================
Thoughts:
--------------------------------------

1. By using DP, calculation time can be greatly reduced.

2. How to DP? Need two trackers.

   Define the number of ways to decode until str[i] is dp[i];
   
   If the number str[i] is not '0', then dp[i] = dp[i-1];
   Plus, if the last two digits form a number between 10 to 26, 
        dp[i] += dp[i-2];
        
   Special case is when str[i] == '0':
       it doesn't decode by its own, and has to have accompany.
       If it doesn't form a number between 10 and 26, return 0. FAIL.

=========================================
Code (Iterative DP, C):
--------------------------------
int numDecodings(char *s) {
    int len = strlen(s);
    if (len == 0 || s[0] == '0') {
        return 0;
    } else if (len == 1) {
        return 1;
    }
    
    int *records = (int*)malloc(sizeof(int[len]));
    memset(records, 0, len);
    records[0] = 1;
    
    int i;
    for (i = 1; i < len; i++) {
        if (s[i] != '0') {
            records[i] = records[i-1];
        } else if (s[i-1] == '0' || s[i-1] > '2') {
            return 0;
        }
        
        if ((s[i-1] == '1') || (s[i-1] == '2' && s[i] <= '6')) {
            records[i] += (i-2 >= 0 ? records[i-2] : 1);
        }
    }
    return records[len - 1];
}
