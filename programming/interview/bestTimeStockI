Description:

Say you have an array for which the ith element is the price of a given stock on day i.

If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.


====================================================
Thoughts:

the DP array keeps track of the minimum price emerged before it.
We need only track the min price before the curr one, don't need to keep track of the min price after the curr one. Obviously.....


====================================================
Codes (iterative DP, C):
---------------------------------
int maxProfit(int prices[], int n){
    if (n == 0 || n == 1) {
        return 0;
    }
    // records stores the minimum price emerged before it (and curr).
    int *records = (int*)malloc(sizeof(int[n]));
    memset(records, 0, n);
    records[0] = prices[0];
    
    int i, maximumProfit = 0;
    for (i = 1; i < n; i++) {
        if (prices[i] < records[i-1]) {
            records[i] = prices[i];
        } else {
            records[i] = records[i-1];
        }
        
        if (prices[i] - records[i-1] > maximumProfit) {
            maximumProfit = prices[i] - records[i-1];
        }
    }
    
    return maximumProfit;
}
