========================
segmentation fault:
------------------------
1. Some pointers need to be initialized before being used in a function.
   Wrong: struct stat *stat_buf;
          fstat (fd_read, stat_buf);

   Correct: struct stat stat_buf;
            fstat (fd_read, &stat_buf);

2. Avoid referencing NULL pointers, which is very important! You might have initialized a pointer as NULL, and then get into trouble referencing it before assigning a value to it.

========================
make warning: incompatible implicit declaration of built-in function ‘exit’ [enabled by default]
------------------------
  Nothing to say, just remember to include <stdlib.h>. However it's fine if you don't include it, since the compiler will treat exit() function as built-in function and enabled it by default.

========================
make warning: ‘gets’ is deprecated  [-Wdeprecated-declarations]
------------------------
This is because there are better options than gets() that we’ll discuss later, and the compiler wants to discourage us from using gets() in general.

If the warnings bother you, add the -Wno-deprecated-declarations option to your gcc command.

from  www.sec.in.tum.de

========================
make error: subscripted value is neither array nor pointer nor vector
------------------------
This looks like a stupid question.
The sample wrong code looks like this:

  char* a, b;
  b = (char*)malloc(10*sizeof(char));
  b[9] = '\0';

Then comes the mistake.
The reason is that, I wanted to declare b as a char pointer, but actually I declared it as a char variable. Instead of writing like:
  char* a, b;
I should have written:
  char *a, *b;

and This is so silly!!!

=======================
after fork(), parent process becomes child too!!!
-----------------------
This is a silly problem... In the program, I wrote:

if (pid=fork() < 0) {A}
else if (pid == 0) {
  execve()...
}

Then I found the parent process became child, and executed the code of child too!!!
Why is this happening?
We can add parenthesis to make it clear:

if (pid = (fork() < 0) ) {A}
......

Actually, I made a mistake here... to correct it,

if ( (pid=fork()) < 0 ) {A}

Done......

=======================
string problem
---------------------
statement:
    if(last_dir == "") .....

well, last_dir is a char pointer.
Should use strcmp() instead:

    if (strcmp(last_dir, "") == 0) ...

=======================
execve() failed: bad address space
----------------------
The argv pointer passed to execve() must have a NULL value at last, namely:
    argv[argc] = NULL;
must be satisfied!
